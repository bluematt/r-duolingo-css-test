$default-sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

@function implode($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{implode($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

@function str-trim($string) {
  @if type-of($string) != "string" {
    @warn "`str-trim` function expecting a string for $string; #{type-of($string)} given.";
    @return false;
  }

  $start: 1;
  $end: str-length($string);

  @for $i from 1 through str-length($string) {
    $first: str-slice($string, $i, $i);
    $last: str-slice($string, -$i, -$i);

    @if $first == " " and $i + 1 == $start + 1 {
      $start: $i + 1;
    }

    @if $last == " " and str-length($string) - $i == $end - 1 {
      $end: str-length($string) - $i;
    }
  }

  @return str-slice($string, $start, $end);
}

@function str-implode($list) {
  $result: "";

  @each $item in $list {
    $result: str-trim($result) + str-trim($item);
  }

  @return $result;
}

@function str-replace($string, $substr, $newsubstr, $all: 0) {
  $position-found: str-index($string, $substr);
  $processed: ();

  @while ($position-found and $position-found > 0) {
    $length-substr: str-length($substr);
    $processed: append($processed, str-slice($string, 0, $position-found - 1));
    $processed: append($processed, $newsubstr);
    $string: str-slice($string, $position-found + $length-substr);

    $position-found: 0;

    @if ($all > 0) {
      $position-found: str-index($string, $substr);
    }
  }

  $processed: append($processed, $string);
  $string: "";

  @each $s in $processed {
    $string: #{$string}#{$s};
  }

  @return $string;
}

@function quick-sort($list) {
  $less:  ();
  $equal: ();
  $large: ();
  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      }
      @else if _str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      }
      @else if not _str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }
    @return join(join(quick-sort($less, $order), $equal), quick-sort($large, $order));
  }
  @return $list;
}

@function _str-compare($a, $b, $order) {
  @if type-of($a) == number and type-of($b) == number {
    @return $a < $b;
  }
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  @return str-length($a) < str-length($b);
}

@function _swap($list, $a, $b) {
  @if abs($a) > length($list) or abs($b) > length($list) {
    @return $list;
  }
  $tmp: nth($list, $a);
  $list: set-nth($list, $a, nth($list, $b));
  $list: set-nth($list, $b, $tmp);
  @return $list;
}







@function str-compare($string-a, $string-b, $order: $default-sort-order) {
  // Cast values to strings
  $string-a: to-lower-case($string-a + unquote(""));
  $string-b: to-lower-case($string-b + unquote(""));

  // Loop through and compare the characters of each string...
  @for $i from 1 through min(str-length($string-a), str-length($string-b)) {

    // Extract a character from each string
    $char-a: str-slice($string-a, $i, $i);
    $char-b: str-slice($string-b, $i, $i);

    // If characters exist in $order list and are different
    // return true if first comes before second
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  // In case they are equal after all characters in one string are compared,
  // return the shortest first
  @return str-length($string-a) < str-length($string-b);
}

@function swap($list, $index-a, $index-b) {
  @if abs($index-a) > length($list) or abs($index-b) > length($list) {
    @return $list;
  }
  $tmp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $tmp);
  @return $list;
}

@function sort($list, $order: $default-sort-order) {

  // Cycle through each item in the list
  @for $i from 1 through length($list) {

    // Compare the item with the previous items in the list
    @for $j from $i * -1 through -1 {

      // abs() trick to loop backward
      $j: abs($j);

      // Compare both values
      @if $j > 1 and str-compare(nth($list, $j), nth($list, $j - 1), $order) {
        // If the item should go before the other, swap them
        $list: swap($list, $j, $j - 1);
      }
    }
  }

  // Return the sorted list
  @return $list;
}
